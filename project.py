# -*- coding: utf-8 -*-
"""Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17Vf7o8vN5bVSCQdVidOvYV175NfDibc3

# **Project** **1**
"""

Books =  {
         1 : {"Titles":"Pride And Prejudice","Authors":"Jane Austen","Genre":"Crime","Status":"Available"},
         2 : {"Titles":"Great Expectations","Authors":"Charles Dickens","Genre":"Thriller","Status":"Available"},
         3 : {"Titles":"The Testaments","Authors":"Margaret Atwood","Genre":"Solitude","Status":"Available"},
         4 : {"Titles":"The Alchemist","Authors":"Paulo Coelho","Genre":"Political Satire","Status":"Checkout"},
         5 : {"Titles":"The Notebook","Authors":"Nicholas Sparks","Genre":"Romance","Status":"Available"},
         6 : {"Titles":"The Hunger Games","Authors":"Suzanne Collins","Genre":"Dystopian","Status":"Available"},
         7 : {"Titles":"The Da Vinci Code","Authors":"Dan Brown","Genre":"Mystery","Status":"Available"},
         8 : {"Titles":"The Fault In Our Stars","Authors":"John Green","Genre":"Historical Fiction","Status":"CheckOut"},
         9 : {"Titles":"The Book Thief","Authors":"Markus Zusak","Genre":"Historical Fiction","Status":"Available"},
         10: {"Titles":"The Fault","Authors":"John English","Genre":"Historical Fiction","Status":"Available"}
}

Users = {
         1 : {"Names":"Ali","ID":"12345","Borrowed_Books":"No"},
         2 : {"Names":"Ahmad","ID":"12346","Borrowed_Books":"Yes"},
         3 : {"Names":"Saqib","ID":"12347","Borrowed_Books":"No"},
         4 : {"Names":"Mubeen","ID":"12348","Borrowed_Books":"No"},
         5 : {"Names":"Alia","ID":"12349","Borrowed_Books":"Yes"},
         6 : {"Names":"Samra","ID":"12350","Borrowed_Books":"No"},
         7 : {"Names":"Yousuf","ID":"12351","Borrowed_Books":"Yes"},
         8 : {"Names":"Munaza","ID":"12352","Borrowed_Books":"No"},
         9: {"Names":"Faheem","ID":"12353","Borrowed_Books":"No"},
         10 :{"Names":"Kamran","ID":"12354","Borrowed_Books":"Yes"}
         }

list1 = [Books,Users]

def borrow_books(input_borrow):
  found = False
  for key,books in Books.items():
    if input_borrow.lower() == books["Titles"].lower() and books["Status"].lower() == "available":
      print(f"The Book you asked for {books['Titles']} is {books['Status']} ")
      Titles = books["Titles"]
      print(Books)
      user_input = input("Enter Your Name :  ")
      for keys,users in Users.items():
        if users["Borrowed_Books"].lower() == "no" and user_input.lower() == users["Names"].lower():
          Books[key]["Status"] = "CheckOut"
          print(f"The Status of {Titles} is CheckOut Now")
          Users[keys]["Borrowed_Books"] = books["Titles"]
          print(f'{users["Names"]} with ID {users["ID"]} has Borrowed a Book {books["Titles"]}')
        elif users["Borrowed_Books"].lower() == "yes" and user_input.lower() == users["Names"].lower():
          print("User has already borrowed a book")
          break
      found = True
      break

    elif input_borrow.lower() == books["Titles"].lower() and not books["Status"].lower() == "available":
      print(f"Sorry The Book {books['Titles']}, you have chosen is Checkout")
      found = True
      break
  if not found:
    print("Book Not Found Or Is Not Available")

def return_books(input_return):
  found = False
  for key,books in Books.items():
    if input_return.lower() == books["Titles"].lower() and books["Status"].lower() == "checkout"  :
      print(f"The Book you want to Return is {books['Titles']}")
      input_user = input("Enter Your Name  ")
      for keys,users in Users.items():
        if input_user.lower() == users["Names"].lower() and users["Borrowed_Books"].lower() == books["Titles"].lower():
          Books[key]["Status"] = "Available"
          Users[keys]["Borrowed_Books"] = "No"
          print(f"The book you have returned {books['Titles']} is {books['Status']} Now ")
          print(f"The User {users['Names']} with ID {users['ID']} has Returned a Book {books['Titles']}")
          found = True
          break
      break
    elif input_return.lower() == books["Titles"].lower() and books["Status"].lower() == "available":
      print(f"The Book {books['Titles']} you selected to return is already {books['Status']}")
      found = True
      break
  if not found:
    print("Invalid Response")

def add_user(**add_user):
  add_name = input("Enter The Name Of The User  ")
  add_ID = input("Enter The ID Of The User  ")
  add_book_borrowed = input("Enter The Borrowed Books Of The User  ")

  user_info = {
      "Name" : add_name,
      "ID" : add_ID,
      "Borrowed Books" : add_book_borrowed
      }
  user_new = max(Users.keys())+ 1
  Users[user_new] = user_info
  print(f"The User ({add_name}) with ID ({add_ID}) is added Now")

def add_books(**add_books1):
  add_name = input("Enter The Name Of The Book  ")
  add_author = input("Enter The Author Of The Book  ")
  add_genre = input("Enter The Genre Of The Book  ")
  add_status = input("Enter The Status Of The Book  ")
  add_books ={
      "Titles" : add_name,
      "Authors" : add_author,
      "Genre" : add_genre,
      "Status" : add_status
  }
  book_new = max(Books.keys())+ 1
  Books[book_new] = add_books
  print(f"The book ({add_name}) of Author ({add_author}) is Added Now")

def books_status(status):
  found = False
  for books1 in Books.values():
    if books1["Titles"].lower() == status.lower():
       book_titles = books1["Titles"]
       book_authors = books1["Authors"]
       book_status = books1["Status"]
       print(f"{book_titles} By {book_authors} ({book_status})")
       found = True
  if not found:
      print("Book Not Found")

def return_book():
  for keys,books in Books.items():
    print(books["Titles"])

def view_users():
  for keys,users in Users.items():
    print(f"Names = {users['Names']} ID : {users['ID']}")


def book_search(search_book):
  found = False
  for books in Books.values():
    if books["Titles"].lower() == search_book.lower():
      book_title = books["Titles"]
      book_author = books["Authors"]
      book_status = books["Status"]
      print(f"{book_title} By {book_author} ({book_status})")
      found = True
  if not found:
      print("Book Not Found")

def user_info(display_info):
  found = False
  for users in Users.values():
     if users.get("Names","").lower() == display_info.lower():
       name_user = users.get("Names")
       id_user = users.get("ID")
       borrowed_books = users.get("Borrowed_Books")
       print(f"Your Name is {name_user},ID is {id_user} and Borrowed Books are {borrowed_books}")
       found = True
  if not found:
      print("Incorrect Information")







while True:
  print("Welcome To The Library Management System")
  user_input = input("""Choose An Option
1.View All Books
2.Search A Book
3.Book Status
4.Borrow A Book
5.Return a book
6.View all users
7.Display User Info
8.Others
9.Exit

""").upper()
  if user_input == "VIEW ALL BOOKS":
    for Book_infos in Books.values():
      Book_titles = Book_infos["Titles"]
      Author = Book_infos["Authors"]
      Availability = Book_infos["Status"]
      print(f"{Book_titles} by {Author} ({Availability})")
  elif user_input == "SEARCH A BOOK":
    input_book = input("Enter The Name Of The Book  ")
    book_search(input_book)
  elif user_input == "BOOK STATUS":
    input_status = input("Enter The Name Of The Book To Check The Status  ")
    books_status(input_status)
  elif user_input == "BORROW A BOOK":
    input_borrow = input("Enter The Name Of The Book To Borrow  ")
    borrow_books(input_borrow)

  elif user_input == "RETURN A BOOK":
    return_book()
    input_return = input("Enter The Name Of The Book To Return from the above : ")
    return_books(input_return)
  elif user_input == "VIEW ALL USERS":
    view_users()
  elif user_input == "OTHERS":
    input_again = input("""Choose An Option
1.Add A User
2.Add A Book
3.Exit

""").upper()
    if input_again == "ADD A BOOK":
       add_books()
    if input_again == "ADD A USER":
       add_user()
    if input_again == "EXIT":
       print("Thank You")
    break
  elif user_input == "DISPLAY USER INFO":
    Input_info = input("Enter Your Name  ")
    user_info(Input_info)

  elif user_input == "EXIT":
    print("Thank You ! For Visiting Library Management System")
  else :
    print("Invalid Input")
  break